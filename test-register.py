from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# T·∫°o ƒë·ªëi t∆∞·ª£ng Options ƒë·ªÉ c·∫•u h√¨nh Chrome
chrome_options = Options()
# Kh√¥ng s·ª≠ d·ª•ng ch·∫ø ƒë·ªô headless
# chrome_options.add_argument("--headless")  # N·∫øu mu·ªën headless th√¨ b·ªè comment d√≤ng n√†y

driver = webdriver.Chrome(options=chrome_options)
wait = WebDriverWait(driver, 10)

BASE_URL = "http://localhost/team19.thoitrangstore.com"  # C·∫≠p nh·∫≠t theo URL c·ªßa b·∫°n

def register_test(user_data, expected_keywords):
    print(f"üß™ ƒêang ki·ªÉm th·ª≠: {user_data}")
    driver.get(f"{BASE_URL}/register.php")

    # ƒêi·ªÅn d·ªØ li·ªáu n·∫øu c√≥
    if "first_name" in user_data:
        wait.until(EC.presence_of_element_located((By.NAME, "first-name"))).send_keys(user_data["first_name"])
    if "last_name" in user_data:
        driver.find_element(By.NAME, "last-name").send_keys(user_data["last_name"])
    if "email" in user_data:
        driver.find_element(By.NAME, "email").send_keys(user_data["email"])
    if "password" in user_data:
        driver.find_element(By.NAME, "password").send_keys(user_data["password"])
    if "password_confirm" in user_data:
        driver.find_element(By.NAME, "password-confirm").send_keys(user_data["password_confirm"])
    if "phone" in user_data:
        driver.find_element(By.NAME, "phone").send_keys(user_data["phone"])

    # ƒê·ª£i ph·∫ßn t·ª≠ loading n·∫øu c√≥
    try:
        WebDriverWait(driver, 5).until(EC.invisibility_of_element_located((By.CLASS_NAME, "load-customer")))
    except:
        pass  # Kh√¥ng c√≥ c≈©ng kh√¥ng sao

    # D√πng JavaScript click ƒë·ªÉ tr√°nh b·ªã che khu·∫•t
    try:
        register_btn = driver.find_element(By.NAME, "userRegistration")
        driver.execute_script("arguments[0].click();", register_btn)
    except Exception as e:
        print("‚ùå Kh√¥ng th·ªÉ click n√∫t ƒëƒÉng k√Ω:", str(e))
        return

    # ƒê·ª£i x·ª≠ l√Ω backend
    time.sleep(2)

    # Ki·ªÉm tra k·∫øt qu·∫£
    page_source = driver.page_source.lower()
    if any(keyword.lower() in page_source for keyword in expected_keywords):
        print("‚úÖ PASS")
    else:
        print("‚ùå FAIL - Kh√¥ng t√¨m th·∫•y t·ª´ kh√≥a k·ª≥ v·ªçng")
        print(f"üîç N·ªôi dung trang (500 k√Ω t·ª± ƒë·∫ßu):\n{driver.page_source[:500]}")

# Test code n√†y
test_cases = [
    # ‚úÖ 1. ƒêƒÉng k√Ω th√†nh c√¥ng
    {
        "case": {
            "first_name": "Huy",
            "last_name": "Nguyen",
            "email": "huy123@example.com",
            "password": "Abc12345",
            "password_confirm": "Abc12345",
            "phone": "0987654321"
        },
        "expect": ["ƒëƒÉng k√Ω th√†nh c√¥ng", "ƒëƒÉng nh·∫≠p", "login"]
    },

    # ‚ùå 2. Thi·∫øu h·ªç
    {
        "case": {
            "first_name": "Linh",
            "email": "test2@example.com",
            "password": "Abc12345",
            "password_confirm": "Abc12345",
            "phone": "0987654321"
        },
        "expect": ["vui l√≤ng nh·∫≠p", "last name", "h·ªç"]
    },

    # ‚ùå 3. Thi·∫øu email
    {
        "case": {
            "first_name": "Mai",
            "last_name": "Tran",
            "password": "Abc12345",
            "password_confirm": "Abc12345",
            "phone": "0987654321"
        },
        "expect": ["vui l√≤ng nh·∫≠p", "email"]
    },

    # ‚ùå 4. Email sai ƒë·ªãnh d·∫°ng
    {
        "case": {
            "first_name": "Nam",
            "last_name": "Pham",
            "email": "sai-email",  # Sai ƒë·ªãnh d·∫°ng
            "password": "Abc12345",
            "password_confirm": "Abc12345",
            "phone": "0987654321"
        },
        "expect": ["email kh√¥ng h·ª£p l·ªá", "email invalid", "email sai"]
    },

    # ‚ùå 5. M·∫≠t kh·∫©u kh√¥ng kh·ªõp
    {
        "case": {
            "first_name": "Tuan",
            "last_name": "Le",
            "email": "tuan123@example.com",
            "password": "Abc12345",
            "password_confirm": "Abc99999",  # Kh√¥ng kh·ªõp
            "phone": "0987654321"
        },
        "expect": ["m·∫≠t kh·∫©u kh√¥ng kh·ªõp", "password kh√¥ng ƒë√∫ng"]
    },

    # ‚ùå 6. S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (ch·ª©a ch·ªØ)
    {
        "case": {
            "first_name": "Hoa",
            "last_name": "Nguyen",
            "email": "hoa999@example.com",
            "password": "Abc12345",
            "password_confirm": "Abc12345",
            "phone": "abc1234567"  # Sai ƒë·ªãnh d·∫°ng
        },
        "expect": ["s·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá", "phone invalid"]
    },

    # ‚ùå 7. Email ƒë√£ t·ªìn t·∫°i
    {
        "case": {
            "first_name": "Huy",
            "last_name": "Nguyen",
            "email": "huy123@example.com",  # ƒê√£ ƒëƒÉng k√Ω ·ªü TC1
            "password": "Abc12345",
            "password_confirm": "Abc12345",
            "phone": "0987654321"
        },
        "expect": ["email ƒë√£ t·ªìn t·∫°i", "ƒë√£ c√≥ t√†i kho·∫£n"]
    }
]

for test in test_cases:
    register_test(test["case"], test["expect"])
    print("-" * 50)

driver.quit()